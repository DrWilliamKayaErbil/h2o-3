package ai.h2o.cascade.stdlib;

import ai.h2o.cascade.core.Function;
import ai.h2o.cascade.vals.Val;

import static ai.h2o.cascade.vals.Val.Type.*;

/**
 * Base class for all functions in the Cascade standard library.
 */
public abstract class StdlibFunction extends Function {

  public class TypeError extends IllegalArgumentException {
    public int index;

    public TypeError(int i, String message) {
      super(message);
      index = i;
    }
  }

  /**
   * Perform verification that the number of arguments supplied to a function
   * is within the expected bounds, or throw an exception otherwise.
   *
   * @param actualN Number of arguments passed to a function
   * @param expectedMin Smallest acceptable count of arguments
   * @param expectedMax Largest acceptable count of arguments. It is often the
   *                    case that {@code expectedMin == expectedMax}.
   */
  @SuppressWarnings("unused")  // Used in the apply0() method generated by the CascadeStandardLibrary
  protected final void argumentsCountCheck(int actualN, int expectedMin, int expectedMax) {
    if (expectedMin == expectedMax) {
      if (actualN != expectedMin) {
        String count = expectedMin + " argument" + (expectedMin == 1? "" : "s");
        String actual = actualN + " argument" + (actualN == 1? "" : "s");
        throw new IllegalArgumentException("Expected " + count + " but obtained " + actual);
      }
    } else {
      if (actualN < expectedMin) {
        String count = expectedMin + " argument" + (expectedMin == 1? "" : "s");
        String actual = actualN + " argument" + (actualN == 1? "" : "s");
        throw new IllegalArgumentException("Expected at least " + count + " but obtained " + actual);
      }
      if (actualN > expectedMax && expectedMax != -1) {
        String count = expectedMax + " argument" + (expectedMax == 1? "" : "s");
        String actual = actualN + " argument" + (actualN == 1? "" : "s");
        throw new IllegalArgumentException("Expected at most " + count + " but obtained " + actual);
      }
    }
  }


  /**
   * Verify that argument {@code i} within the {@code args} has the expected
   * type, or throw an error otherwise.
   *
   * @param args Array of all arguments to a function.
   * @param i Index of the element to test.
   * @param expType Expected type for element {@code args[i]}.
   */
  @SuppressWarnings("unused")  // Used in the apply0() method generated by the CascadeStandardLibrary
  protected final void checkArg(Val[] args, int i, Val.Type expType) {
    Val.Type actualType = args[i].type();
    if (actualType == expType || actualType == NULL ||
        actualType == NUMS && (expType == INT && args[i].maybeInt() ||
                               expType == BOOL && args[i].maybeBool()))
      return;
    throw new TypeError(i, "Expected argument of type " + expType + " but instead got " + actualType);
  }
}
